1.
SELECT s.name, s.surname, h.name
FROM student s
INNER JOIN student_hobby sh
	ON sh.student_id = s.id
INNER JOIN hobby h
	ON sh.hobby_id = h.id
ORDER BY s.id

2.
WITH diff_date_sh AS(
  SELECT student_id,
    CASE 
      WHEN date_finish IS NULL THEN 
        CURRENT_DATE - date_start
      ELSE 
        date_finish - date_start
    END pass_days
  FROM student_hobby
)
SELECT *
FROM student s
INNER JOIN diff_date_sh dsh
  ON dsh.student_id = s.id
ORDER BY dsh.pass_days DESC
LIMIT 1

3.

SELECT st.id, st.name, st.surname, st.date_birth
FROM student st
INNER JOIN student_hobby sh
ON sh.student_id = st.id AND sh.date_finish IS NULL
INNER JOIN hobby h
ON sh.hobby_id = h.id
WHERE st.score >
(SELECT avg(score) avg_score
FROM student) AND (SELECT SUM(risk) FROM hobby) > 0.9

4.
SELECT st.id, st.name, st.surname, st.date_birth, h.name, 
sh.date_start, sh.date_finish,
((sh.date_finish - sh.date_start)/30) duration
FROM student_hobby sh
INNER JOIN student st
ON sh.student_id = st.id AND sh.date_finish IS NOT NULL
INNER JOIN hobby h
ON sh.hobby_id = h.id

5.
SELECT st.id, st.name, st.surname, st.date_birth, h.name, 
((CURRENT_DATE - st.date_birth)/365) years_old
FROM student_hobby sh
INNER JOIN student st
ON sh.student_id = st.id
INNER JOIN hobby h
ON sh.hobby_id = h.id 

6.
SELECT st.n_group, avg(score)::NUMERIC(3, 2) avg_score 
FROM student_hobby sh
INNER JOIN student st
ON sh.student_id = st.id
INNER JOIN hobby h 
ON sh.hobby_id = h.id AND sh.date_finish IS NOT NULL
GROUP BY st.n_group 

7.
SELECT st.id, st.n_group, h.name, h.risk,
 (CURRENT_DATE - sh.date_start)/30 duration, sh.date_start, sh.date_finish
FROM student_hobby sh
INNER JOIN student st
ON sh.student_id = st.id
INNER JOIN hobby h 
ON sh.hobby_id = h.id
ORDER BY duration DESC 
LIMIT 1

8.
SELECT h.name
FROM student_hobby sh 
INNER JOIN student st
ON sh.student_id = st.id
INNER JOIN hobby h 
ON sh.hobby_id = h.id
WHERE st.score = (
SELECT max(score)
FROM student)

9.

SELECT h.name, st.n_group, st.score
FROM student_hobby sh
INNER JOIN student st
ON sh.student_id = st.id AND sh.date_finish IS NULL
INNER JOIN hobby h
ON sh.hobby_id = h.id
WHERE (st.n_group/1000) = 2 AND st.score::VARCHAR LIKE '3%' 

10.
SELECT st.n_course, count(student_id) count_st, count(active_hobby) 
filter (WHERE active_hobby > 1), (count(active_hobby) 
filter (WHERE active_hobby > 1) *1.0 / 
count(student_id))
FROM(
    SELECT (st.n_group/1000) n_course,
    st.id student_id,
    count(sh.hobby_id) active_hobby
    FROM student st
    LEFT JOIN student_hobby sh
    ON sh.student_id = st.id 
    AND
    sh.date_finish IS NULL
    GROUP BY (n_course, st.id)
) st
GROUP BY n_course 
HAVING (count(active_hobby) 
filter (WHERE active_hobby > 1)*1.0 / 
count(student_id)) > 0.5

11.

SELECT n_group, count(id) all_students, 
count(id) filter(WHERE score >= 4) 
count_4, 
count(id) filter(WHERE score >= 4)*1.0 /
count(id) 
FROM student
GROUP BY n_group
HAVING (count(id) filter
 (WHERE score >= 4)*1.0 /
 count(id)) > 0.6

12.

WITH T_12 AS (
SELECT
DISTINCT ON ((sh.hobby_id, st.n_group / 1000))
floor(st.n_group / 1000) as n_course,
sh.hobby_id
FROM student st
INNER JOIN student_hobby sh
ON sh.student_id = st.id AND 
sh.date_finish IS NULL
)
SELECT n_course, count(hobby_id)
FROM T_12
GROUP BY n_course

13.
SELECT st.id, st.surname,
st.name, st.date_birth,
st.n_group / 1000 n_course
FROM student_hobby sh
INNER JOIN student st
ON sh.student_id = st.id
AND sh.date_finish IS NOT NULL
OR sh.date_start IS NULL
WHERE st.score > 4.5
GROUP BY st.id
ORDER BY (st.n_group / 1000),
 st.date_birth DESC

14.

CREATE OR REPLACE VIEW students_V1 AS
SELECT st.id, st.name, st.surname,
st.date_birth, st.address, st.score,
st.n_group
FROM student_hobby sh
INNER JOIN student st
ON sh.student_id = st.id AND 
sh.date_finish IS NULL AND
DATE_PART('year', AGE(CURRENT_DATE,
sh.date_start)) >= 5
GROUP BY st.id
15.

SELECT count(st.id) count_students, 
sh.hobby_id
FROM student_hobby sh
INNER JOIN student st
ON sh.student_id = st.id AND
sh.date_finish IS NULL 
GROUP BY sh.hobby_id

16.
SELECT count(st.id) count_students, 
sh.hobby_id
FROM student_hobby sh
INNER JOIN student st
ON sh.student_id = st.id AND
sh.date_finish IS NULL 
GROUP BY sh.hobby_id
ORDER BY count(st.id) DESC
LIMIT 1

17.

SELECT st.id, st.name, st.surname,
st.date_birth, st.address, st.score,
st.n_group
FROM student_hobby sh
INNER JOIN student st
ON sh.student_id = st.id AND
sh.date_finish IS NULL AND 
sh.hobby_id = (
    SELECT sh.hobby_id
    FROM student_hobby sh
    WHERE sh.date_finish IS NULL
    GROUP BY sh.hobby_id
    ORDER BY count(sh.id) DESC
    LIMIT 1 
)

18.

SELECT h.id, h.risk
FROM hobby h
ORDER BY h.risk DESC
LIMIT 3

19.

SELECT st.name, st.surname, st.n_group
FROM student_hobby sh
INNER JOIN student st
ON sh.student_id = st.id AND
sh.date_finish IS NULL 
GROUP BY (st.id, sh.date_start)
ORDER BY (CURRENT_DATE - sh.date_start) DESC
LIMIT 10

20.

SELECT DISTINCT st.n_group
FROM student st
WHERE st.id IN (
SELECT sh.student_id
FROM student_hobby sh
WHERE sh.date_finish IS NULL 
GROUP BY (sh.student_id, sh.date_start)
ORDER BY (CURRENT_DATE - sh.date_start) DESC
LIMIT 10
)

21.

CREATE OR REPLACE VIEW Student_T21 AS 
SELECT st.id, st.name, st.surname
FROM student st
ORDER BY st.score DESC

22.

SELECT DISTINCT ON (n_course) 
h.name, (st.n_group/1000) n_course
FROM student_hobby sh
INNER JOIN student st
ON sh.student_id = st.id AND 
sh.date_finish IS NULL
INNER JOIN hobby h
ON sh.hobby_id = h.id 
GROUP BY (st.n_group/1000, h.id)
ORDER BY n_course, count(sh.id)

23.

CREATE OR REPLACE VIEW student_T23 AS 
SELECT h.name
FROM student_hobby sh
INNER JOIN student st
ON sh.student_id = st.id AND 
sh.date_finish IS NULL 
INNER JOIN hobby h
ON sh.hobby_id = h.id
WHERE st.n_group/1000 = 2
GROUP BY (h.name, h.risk)
ORDER BY (count(st.id), h.risk) DESC
LIMIT 1

24.

CREATE OR REPLACE VIEW student_T24 AS
SELECT (st.n_group/1000) n_course, 
count(st.id), count(st.id) filter 
(WHERE st.score >= 4.5)
FROM student st
GROUP BY (st.n_group/1000)

25.

CREATE OR REPLACE VIEW student_T25 AS
SELECT h.name
FROM student_hobby sh
INNER JOIN student st
ON sh.student_id = st.id AND
sh.date_finish IS NULL 
INNER JOIN hobby h
ON sh.hobby_id = h.id
GROUP BY h.name
ORDER BY count(st.id) DESC
LIMIT 1
